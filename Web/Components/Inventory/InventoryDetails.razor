@page "/InventoryDetails/{IvId:int?}"
@using System.Net.Http.Json
@using Domain.Models.Response
@inject HttpClient Http
@inject NavigationManager Navigation
@using System.Text
@using Mapster



<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" />
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
<script src="js/site.js"></script>

<style>
    .status-badge {
        font-weight: bold;
        padding: 4px 12px;
        border-radius: 4px;
        display: inline-block;
        margin-bottom: 8px;
    }

    .bg-defined {
        background-color: #fff3cd;
        color: #856404;
    }

    .bg-inprogress {
        background-color: #f8d7da;
        color: #721c24;
    }

    .bg-open {
        background-color: #d4edda;
        color: #155724;
    }

    .inventory-row {
        display: flex;
        gap: 10px;
        flex-wrap: wrap;
        margin-bottom: 2rem;
    }

    .card-container {
        display: flex;
        background: #fff;
        border: 1px solid #ccc;
        box-shadow: 0 0 4px rgba(0,0,0,0.1);
    }

    .card-content {
        flex-grow: 1;
        padding: 10px;
    }

    .card-actions {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: flex-start;
        border-left: 1px solid #ccc;
        padding: 10px 8px;
        min-width: 90px;
        background-color: #fafafa;
        gap: 12px;
    }

    .card-actions button {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        background: none;
        border: none;
        font-size: 14px;
        color: #444;
        cursor: pointer;
        transition: color 0.2s ease;
        padding: 4px;
        width: 100%;
        text-align: center;
    }
    .redColor {
     color: red !important;
    }
    .card-actions button:hover {
        color: #007bff;
    }

    .card-actions button i {
        font-size: 18px;
        margin-bottom: 4px;
    }

    .card-actions button span {
        font-size: 12px;
    }

    .info-box {
        border: 1px solid #e0e0e0;
        padding: 8px 10px;
        margin-bottom: 8px;
    }

    .info-box strong {
        display: inline-block;
        width: 130px;
    }

    .column-40 {
        width: 40%;
    }

    .column-100 {
        width: 100%;
    }

    .checkbox-label {
        display: inline-flex;
        align-items: center;
        gap: 6px;
        font-size: 0.95rem;
        color: #555;
        background-color: #f9f9f9;
        padding: 4px 8px;
        border-radius: 4px;
        border: 1px solid #ddd;
        margin-left: 10px;
        cursor: not-allowed;
    }

    .checkbox-label input[type="checkbox"] {
        accent-color: #6c757d;
        width: 16px;
        height: 16px;
    }

    .new-inventory {
        margin-top: 2rem;
        display: inline-flex;
        align-items: center;
        gap: 8px;
        cursor: pointer;
        font-weight: bold;
        font-size: 1.1rem;
        color: #2c3e50;
        transition: color 0.3s ease;
    }

    .new-inventory i {
        font-size: 1.4rem;
        color: #27ae60;
        transition: color 0.3s ease;
    }

    .new-inventory:hover {
        color: #27ae60;
    }

    .new-inventory:hover i {
        color: #1e8449;
    }
.modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    background-color: rgba(0, 0, 0, 0.2); /* Optional background dimming */
    z-index: 9999;
    display: flex;
    justify-content: center;
    align-items: flex-start;
    padding-top: 4px;
    padding-bottom: 4px;
    overflow-y: auto;
}

.modal-dialog {
    width: 30%;
    background-color: #fff;
    margin-top: 4px;
    margin-bottom: 4px;
    padding: 0;
    border-radius: 8px;
    border: 2px solid #d1d1d1;
    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);
    display: flex;
    flex-direction: column;
}

.modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 8px 12px;
    border-bottom: 2px solid #ccc;
    background-color: #f9f9f9;
    border-top-left-radius: 8px;
    border-top-right-radius: 8px;
    font-weight: bold;
    font-size: 1.05rem;
}

.modal-body {
    padding: 12px;
    border-top: 2px solid #ccc;
    background-color: #fff;
}

/* Optional: Improve spacing for internal field sections */
.modal-section {
    margin-bottom: 16px;
    border: 1px solid #000;
    padding: 12px;
    border-radius: 6px;
}


.btn-close {
    border: none;
    background: none;
    font-size: 1.5rem;
    color: #555;
    cursor: pointer;
    transition: color 0.2s;
}
.btn-close:hover {
    color: #000;
}

.info-box {
    margin-bottom: 6px;
    font-size: 0.95rem;
    color: #333;
}

.checkbox-label {
    margin-left: 10px;
    font-size: 0.9rem;
    color: #555;
}
.form-section {
    border: 2px solid #000; /* bold black border like wireframe */
    padding: 2px;
    margin-bottom: 6px;
    background-color: #fff; /* keep it white unless yellow is required */
    border-radius: 6px;
}

.info-box {
    margin-bottom: 6px;
    font-size: 0.95rem;
    color: #333;
}

.checkbox-label {
    margin-left: 10px;
    font-size: 0.9rem;
    color: #555;
}

.form-control {
    margin-bottom: 1rem;
    border: 1.5px solid #888;
    border-radius: 4px;
}

.form-control:focus {
    background-color: #fff;
    border-color: #4a90e2;
    outline: none;
    box-shadow: 0 0 0 3px rgba(74, 144, 226, 0.2);
}

.form-control:hover {
    border-color: #888;
}

.form-control:disabled,
.form-control[readonly] {
    background-color: #e9ecef;

    opacity: 1;
    cursor: not-allowed;
}


</style>
<h3 class="my-4">Inventory Detail</h3>

@if (inventory == null)
{
    <p><em>Loading...</em></p>
}
else
{   
    <div class="row">
            @{
            var isOpen = inventory.InventoryStatusName == "Opened";
            var containerClass = isOpen ? "card-container column-100" : "card-container";
            }
            <div class="col-md-12 mb-3">
            <div class="@containerClass">
                <div class="card-content">
                    <div class="status-badge @GetStatusColor(inventory.InventoryStatusName)" title="@inventory.InventoryStatusName">
                        @GetStatusText(inventory.InventoryStatusName)
                    </div>
                    <div hidden=@isEdit>
                        <div class="info-box"><strong>Name:</strong> @inventory.Name </div>
                        <div class="info-box"><strong>Description:</strong>  @inventory.Description </div>
                        <div class="info-box"><strong>Inventory Type:</strong> @inventory.InventoryTypeDescription</div>
                        <div class="info-box"><strong>Creation Date:</strong> @inventory.CreationDate.ToShortDateString()</div>
                        <div class="info-box"><strong>Reference Date:</strong> @inventory.ReferenceDate.ToShortDateString()</div>
                        <div class="info-box"><strong>Entry Date:</strong> @inventory.EntryDate.ToShortDateString()</div>
                        <div class="info-box"><strong>Notes:</strong> @inventory.Notes</div>
                        <div class="info-box">
                            <strong>Quantity:</strong> @inventory.QuantityDefault
                            <label class="checkbox-label">
                                <input type="checkbox" disabled checked="@inventory.IsExcelUploadDisabled" />
                                Disable Excel Upload
                            </label>
                        </div>
                    </div>
                    <div hidden=@(!isEdit)>
                    <div class="info-box">
                     <strong>Name:</strong>
                            <InputText class="form-control" @bind-Value="inventory.Name" />
                </div>

                 <div class="info-box">
                       <strong>Description:</strong>
                       <InputTextArea class="form-control" @bind-Value="inventory.Description" />
                 </div>

                  <div class="info-box">
                     <strong>Inventory Type:</strong>
                     <InputSelect class="form-control" @bind-Value="inventory.InventoryTypeId">
                          @foreach (var inventoryType in inventoryTypeList)
                                {
                                  <option value=@inventoryType.InventoryTypeId>@inventoryType.Description</option>
                                }                          
                     </InputSelect>
                 </div>
                  <div class="info-box">
                                 <strong>Creation Date:</strong>
                               <InputDate class="form-control" disabled  @bind-Value="inventory.CreationDate" />
                          </div>

                        <div class="info-box">
                         <strong>Reference Date:</strong>
                                 <InputDate class="form-control" @bind-Value="inventory.ReferenceDate" />
                          </div>

                       <div class="info-box">
                              <strong>Entry Date:</strong>
                                  <InputDate class="form-control" @bind-Value="inventory.EntryDate" />
                        </div>
                          <div class="info-box">
                                    <strong>Notes:</strong>
                                    <InputTextArea class="form-control" @bind-Value="inventory.Notes" />
                              </div>

                             <div class="info-box">
                                          <strong>Quantity:</strong>
                                                              <InputNumber class="form-control" @bind-Value="inventory.QuantityDefault" />
                             </div>

                              <div class="form-check mt-2">
                                    <InputCheckbox class="form-check-input" @bind-Value="inventory.IsExcelUploadDisabled" />
                                <label class="form-check-label">Disable Excel Upload</label>
                               </div>
                    </div>
                </div>                 
                <div  hidden=@isEdit class="card-actions">
                    <button title="Edit" @onclick="() => ShowEdit(inventory)">
                        <i class="fas fa-edit"></i><span>Edit</span>
                    </button>
                   <button title="Stores"  class="@(inventory.inventoryShopCount > 0 ? "redColor" : "")"  @onclick=@(() => Redirect("/stores"))>
                                             <i class="fas fa-store"></i><span>Stores</span>
                                         </button>
                                         <button title="People" class="@(inventory.inventoryShopUserCount > 0 ? "redColor" : "")"  @onclick=@(() => Redirect("/people"))>
                                             <i class="fas fa-users"></i><span>People</span>
                                         </button>
                                         <button class="@(inventory.inventoryShopBUCount > 0 ? "redColor" : "")" title="Products" @onclick=@(() => Redirect("/products"))>
                                             <i class="fas fa-box"></i><span>Prods</span>
                                         </button>
                </div>
                <div hidden=@(!isEdit) class="card-actions">
                             
                                              <button class="btn btn-secondary" @onclick="CloseEdit">
                                                <i class="fas fa-times me-1"></i><span>Close</span>
                                      </button>
                                
                                        <button title="Save" @onclick="() => UpdateInventoryData(inventory)">
                                                <i class="fas fa-save"></i><span>Save</span>
                                        </button>
                                          <button title="Stores" class="@(inventory.inventoryShopCount > 0 ? "redColor" : "")"  @onclick=@(() => Redirect("/stores"))>
                                             <i class="fas fa-store"></i><span>Stores</span>
                                         </button>
                                         <button title="People" class="@(inventory.inventoryShopUserCount > 0 ? "redColor" : "")" @onclick=@(() => Redirect("/people"))>
                                             <i class="fas fa-users"></i><span>People</span>
                                         </button>
                                         <button class="@(inventory.inventoryShopBUCount > 0 ? "redColor" : "")" title="Products" @onclick=@(() => Redirect("/products"))>
                                             <i class="fas fa-box"></i><span>Prods</span>
                                         </button>
                        
                             </div>
               
               
            </div>
            </div>
    </div>
    


    <div class="new-inventory" role="button" tabindex="0" style="cursor: pointer;">
        <i class="fa fa-backward"></i> <a href="/Inventories"> Back to Inventory List</a>
    </div>


    @if (!string.IsNullOrEmpty(message))
    {
        <p>@message</p>
    }

    <div class="inventory-columns">
        @foreach (var inventory in inventoryList)
        {
            <InventoryCard Inventory="inventory" />
        }
    </div>


    @code {
    [Parameter]
    public int IvId { get; set; }
    public bool isEdit = false;
    private InventoryModel inventory = new();
    private InventoryModel inventoryInitial = new();
    private List<InventoryModel> inventoryList = new();
    private List<InventoryTypeModel> inventoryTypeList = new();
    private string message = string.Empty;
    protected override async Task OnInitializedAsync()
    {
        inventory = await Http.GetFromJsonAsync<InventoryModel>("/Inventories/GetById/"+IvId);
        inventoryInitial =  inventory.Adapt<InventoryModel>();    
        inventoryTypeList = await Http.GetFromJsonAsync<List<InventoryTypeModel>>("/GetInventoryType");
    }

    private string GetStatusColor(string status) => status switch
    {
        "In Progress" => "bg-inprogress",
        "Defined" => "bg-defined",
        "Opened" => "bg-open",
        _ => ""
    };

    private string GetStatusText(string status) => status switch
    {
        "In Progress" => "In Progress",
        "Defined" => "Defined",
        "Opened" => "Open",
        _ => "Unknown"
    };   
    private InventoryModel selectedItem;
    private bool showEdit = false;

    private void ShowEdit(InventoryModel item)
    {        
        isEdit = true;
    }

    private void CloseEdit()
    {
        inventory = inventoryInitial.Adapt<InventoryModel>();
        isEdit = false;     
    }

    // private async Task GetById(int id)
    // {
    //     try
    //     {
    //         var response = await Http.GetAsync("/Inventories/GetById/" + id); // Replace with your API endpoint
    //         response.EnsureSuccessStatusCode(); // Throws exception for non-success status codes
    //         if (response.IsSuccessStatusCode)
    //         {
    //             inventory = response.Content.;
    //         }
    //         CloseEdit();
    //         Navigation.Refresh(true);
    //     }
    //     catch (Exception ex)
    //     {
    //         message = "Record failed to update";
    //     }
    // }

    private void Redirect(string redirectTo)
    {
         Navigation.NavigateTo(redirectTo);
    }
    private async Task UpdateInventoryData(InventoryModel selectedItem)
    {
        try
        {
            var response = await Http.PostAsJsonAsync("/UpdateInventory", selectedItem); // Replace with your API endpoint
            response.EnsureSuccessStatusCode(); // Throws exception for non-success status codes
            if(response.IsSuccessStatusCode)
            {
                message = "Record updated successfully";
            }
           CloseEdit();
            Navigation.Refresh(true);
        }
        catch (Exception ex)
        {
                message = "Record failed to update";
        }
    }

    private async Task CreateInventory()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("/CreateInventory","");
            response.EnsureSuccessStatusCode(); 
            if(response.IsSuccessStatusCode)
            {
                message = "Record Created successfully";
                  Navigation.Refresh(true);
            }           
        }
        catch (Exception ex)
        {
                message = "Record failed to create";
        }
    }
}
}
